pass

'''Магический метод __repr__ определяет поведение функции repr(),
вызванной для экземпляра вашего класса.

Метод должен возвращать строку, показывающую,
как может быть инициализирован экземпляр.'''


class Book:
    def __init__(self, name: str):
        self.name = name


book = Book("Букварь")
print(repr(book))
print(f"{book}")
print(f"{book!r}")

'''Что делает !r '''

a = 'Строчка'
print(a)
print(f'{a!r}')


'''
https://sky.pro/media/raznicza-mezhdu-__str__-i-__repr__-v-python/
Часто при работе с объектами в Python возникает потребность в представлении объектов в виде строк. 
Это может быть полезно для отладки, логирования или просто для вывода информации о объекте. 
В Python для этого существуют два специальных метода: __str__ и __repr__. 
Предположим, что есть класс Cat, который имеет атрибуты name и age. 
Можно было бы представить объект этого класса в виде строки следующим образом:
'''


class Cat:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f'Cat(name={self.name}, age={self.age})'


animal_1 = Cat('Маруся', 1)
print(animal_1

'''
Однако, что если нужно получить более детальное или иное представление объекта, 
которое будет удобно использовать для отладки или логирования? 
Здесь на помощь приходит метод __repr__.

Метод __repr__ предназначен для создания «официального» строкового представления объекта, 
которое может быть использовано для воссоздания объекта при помощи функции eval(). 
Вернувшись к нашему примеру с классом Cat, можно добавить метод __repr__ следующим образом:
'''
